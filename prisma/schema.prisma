// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Compra {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  clienteId   String        @db.ObjectId
  cliente     Cliente       @relation(fields: [clienteId], references: [id])
  produtos    Produto[]
  agendamento ListaAgenda[]
  pagamento   Boolean       @default(false)
  ativo       Boolean       @default(true)
  valor       Float
  createdAt   DateTime      @default(now())
}

type Produto {
  nome       String
  quantidade Int
  valorunit  Float
  valorTotal Float
}

model Account {
  id                 String    @id @default(auto()) @map("_id") @db.ObjectId
  userId             String    @db.ObjectId
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String   @db.ObjectId
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  accounts       Account[]
  sessions       Session[]
  password       String
  contato        Json?
  endereco       Endereco?
  tipo           String    @default("user")
  especializacao Json?
}

model VerificationRequest {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Pet {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  tutorId        String   @db.ObjectId
  tutor          Cliente  @relation(fields: [tutorId], references: [id])
  tipo           String
  nome           String
  caracteristica Json?
  obs            Json?
  porte          String?
  idade          String?
  raca           String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Cliente {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  cpf       String
  email     String    @unique
  name      String
  password  String
  tipo      String    @default("cliente")
  pet       Json?
  obs       Json?
  contato   Json?
  endereco  Endereco?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Pet       Pet[]
  compras   Compra[]
}

model Servico {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  nome         String   @unique
  descricao    String
  procedimento String?
  duracao      Int
  valor        Float    @default(0.0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Agenda {
  id    String       @id @default(auto()) @map("_id") @db.ObjectId
  mes   Int
  ano   Int
  dias  DiasRef[]
  users AgendaUser[]
}

type DiasRef {
  dia  String
  tipo String //feriados/normal/domingo
}

type AgendaUser {
  nome         String
  especialista Json
  obs          String?
  dias         Lista[]
}

type Lista {
  dia                  String
  tipo                 String
  especialista         Json
  agenda               Json
  horainicial          Int
  horafinal            Int
  horaintervaloinicial Int
  horaintervalofinal   Int
}

model Agendamento {
  id     String        @id @default(auto()) @map("_id") @db.ObjectId
  dia    Int
  mes    Int
  ano    Int
  agenda ListaAgenda[]
}

type ListaAgenda {
  userId      String
  user        String
  clienteId   String
  cliente     String
  petId       String
  pet         String
  servico     ListaServico[]
  hora        Int
  horachegada Int?
  horasaida   Int?
  // valortotal  String?
  tempoTotal  Int
  valorTotal  Float
  pagamento   String?
  obs         String?
  compraId    String?
  createdAt   DateTime      @default(now())
}

type ListaServico {
  servicoId String
  nome      String
  duracao   Int
  valor     Float
}

type Endereco {
  rua    String
  num    Int
  bairro String
  cidade String
  uf     String
  obs    String
}

// type Especializacao {
//   nome      String
//   descricao String
// }
